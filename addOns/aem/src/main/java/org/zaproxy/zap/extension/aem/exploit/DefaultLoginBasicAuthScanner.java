package org.zaproxy.zap.extension.aem.exploit;

import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.parosproxy.paros.control.Control;
import org.parosproxy.paros.core.scanner.Alert;
import org.parosproxy.paros.core.scanner.Category;
import org.parosproxy.paros.model.Model;
import org.parosproxy.paros.network.HttpMessage;
import org.reflections.Reflections;
import org.zaproxy.zap.extension.aem.base.AbstractHostScan;
import org.zaproxy.zap.extension.aem.util.fuzzer.HttpRequestFuzzBuilder;
import org.zaproxy.zap.extension.alert.ExtensionAlert;

public class DefaultLoginBasicAuthScanner extends AbstractHostScan {

	public static final String NAME = "DefaultLoginScanner";

	private static final String MESSAGE_PREFIX = "aem.default.credentials";

	public static String[] AUTHS = new String[] { "admin:admin", "author:author", "grios:password",
			"replication-receiver:replication-receiver", "vgnadmin:vgnadmin", "aparker@geometrixx.info:aparker",
			"jdoe@geometrixx.info:jdoe", "james.devore@spambob.com:password", "matt.monroe@mailinator.com:password",
			"aaron.mcdonald@mailinator.com:password", "jason.werner@dodgit.com:password" };

	// @see org.parosproxy.paros.core.scanner.PluginFactory.riskComparator
	// lower number last run...
	public static int ID = 5999;

	private Map<Integer, BasicAuthLoginSupported> plugins = new HashMap<>();

	@Override
	public int getId() {
		return ID;
	}

	@Override
	public int getCweId() {
		// CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
		// http://cwe.mitre.org/data/definitions/200.html
		return 200;
	}

	@Override
	public int getWascId() {
		return 1;
	}

	@Override
	public int getCategory() {
		return Category.SERVER;
	}

	@Override
	public String getMessagePrefix() {
		return MESSAGE_PREFIX;
	}

	@Override
	public int getRisk() {
		return Alert.RISK_INFO;
	}

	@Override
	public void doScan(HttpMessage baseMessage) throws Exception {
		ExtensionAlert extensionAlertRef = Control.getSingleton()
				.getExtensionLoader()
				.getExtension(ExtensionAlert.class);

		Thread.sleep(1000);

		extensionAlertRef.getAllAlerts()
				.stream()
				.filter(alert -> plugins.containsKey(alert.getPluginId()))
				.filter(alert -> Model.getSingleton().getSession().isInScope(alert.getHistoryRef()))
				.findFirst()
				.ifPresent(alert -> {
					HttpMessage baseMsg = alert.getMessage();
					BasicAuthLoginSupported plugin = plugins.get(alert.getAlertId());

					HttpRequestFuzzBuilder.builder(baseMsg).authBasic(AUTHS).stream().filter(sendAndReceive(msg -> {
						return plugin.isLoginSuccessful(baseMsg,
								HttpRequestFuzzBuilder.getUserObject(msg).orElse(null));
					}, false)).findFirst().ifPresent(msg -> {
						Optional<UsernamePasswordCredentials> user = HttpRequestFuzzBuilder.getUserObject(msg);
						Optional<String> evidence = plugin.getLoginSuccessEvidence(msg,
								HttpRequestFuzzBuilder.getUserObject(msg).orElse(null));
						String credentials = user.map(UsernamePasswordCredentials::toString).orElse("?");
						if (evidence.isPresent()) {
							newAlert().setDescription(MessageFormat.format(getDescription(), credentials))
									.setEvidence(evidence.get())
									.setMessage(msg)
									.setRisk(Alert.RISK_HIGH)
									.raise();
						}
					});
				});
	}

	@Override
	public void init() {
		super.init();
		Reflections reflections = new Reflections("org.zaproxy.zap.extension.aem");
		reflections.getSubTypesOf(BasicAuthLoginSupported.class).stream().forEach(cls -> {
			try {
				BasicAuthLoginSupported plugin = cls.getDeclaredConstructor().newInstance();
				plugins.put(plugin.getId(), plugin);
			} catch (Exception e) {
				//
			}
		});
	}

}
