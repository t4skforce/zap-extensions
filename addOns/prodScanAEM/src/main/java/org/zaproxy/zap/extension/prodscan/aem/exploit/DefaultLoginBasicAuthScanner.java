/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2020 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.zap.extension.prodscan.aem.exploit;

import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.parosproxy.paros.control.Control;
import org.parosproxy.paros.core.scanner.Alert;
import org.parosproxy.paros.core.scanner.Category;
import org.parosproxy.paros.network.HttpMessage;
import org.reflections.Reflections;
import org.zaproxy.zap.extension.alert.ExtensionAlert;
import org.zaproxy.zap.extension.prodscan.aem.base.AbstractHostScan;
import org.zaproxy.zap.extension.prodscan.util.fuzzer.HttpRequestFuzzBuilder;

public class DefaultLoginBasicAuthScanner extends AbstractHostScan {

    public static final String NAME = "DefaultLoginScanner";

    private static final String MESSAGE_PREFIX = "aem.default.credentials";

    public static String[] AUTHS = new String[] { "admin:admin", "author:author", "grios:password",
            "replication-receiver:replication-receiver", "vgnadmin:vgnadmin", "aparker@geometrixx.info:aparker",
            "jdoe@geometrixx.info:jdoe", "james.devore@spambob.com:password", "matt.monroe@mailinator.com:password",
            "aaron.mcdonald@mailinator.com:password", "jason.werner@dodgit.com:password" };

    // @see org.parosproxy.paros.core.scanner.PluginFactory.riskComparator
    // lower number last run...
    public static int ID = 5999;

    private Map<Integer, BasicAuthLoginSupported> plugins = new HashMap<>();

    @Override
    public int getId() {
        return ID;
    }

    @Override
    public int getCweId() {
        // CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
        // http://cwe.mitre.org/data/definitions/200.html
        return 200;
    }

    @Override
    public int getWascId() {
        return 1;
    }

    @Override
    public int getCategory() {
        return Category.SERVER;
    }

    @Override
    public String getMessagePrefix() {
        return MESSAGE_PREFIX;
    }

    @Override
    public int getRisk() {
        return Alert.RISK_INFO;
    }

    @Override
    public void doScan(HttpMessage baseMessage) throws Exception {
        ExtensionAlert extensionAlertRef = Control.getSingleton()
                .getExtensionLoader()
                .getExtension(ExtensionAlert.class);

        extensionAlertRef.getAllAlerts()
                .stream()
                .filter(alert -> plugins.containsKey(alert.getPluginId()))
                .filter(a -> {
                    try {
                        return a.getHistoryRef().getHttpMessage().isInScope();
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                })
                .findFirst()
                .ifPresent(alert -> {
                    HttpMessage baseMsg = alert.getMessage();
                    BasicAuthLoginSupported plugin = plugins.get(alert.getAlertId());

                    HttpRequestFuzzBuilder.builder(baseMsg).authBasic(AUTHS).stream().filter(sendAndReceive(msg -> {
                        return plugin.isLoginSuccessful(baseMsg,
                                HttpRequestFuzzBuilder.getUserObject(msg).orElse(null));
                    }, false)).findFirst().ifPresent(msg -> {
                        Optional<UsernamePasswordCredentials> user = HttpRequestFuzzBuilder.getUserObject(msg);
                        Optional<String> evidence = plugin.getLoginSuccessEvidence(msg,
                                HttpRequestFuzzBuilder.getUserObject(msg).orElse(null));
                        String credentials = user.map(UsernamePasswordCredentials::toString).orElse("?");
                        if (evidence.isPresent()) {
                            newAlert().setDescription(MessageFormat.format(getDescription(), credentials))
                                    .setEvidence(evidence.get())
                                    .setMessage(msg)
                                    .setRisk(Alert.RISK_HIGH)
                                    .raise();
                        }
                    });
                });
    }

    @Override
    public void init() {
        super.init();
        Reflections reflections = new Reflections("org.zaproxy.zap.extension.aem");
        reflections.getSubTypesOf(BasicAuthLoginSupported.class).stream().forEach(cls -> {
            try {
                BasicAuthLoginSupported plugin = cls.getDeclaredConstructor().newInstance();
                plugins.put(plugin.getId(), plugin);
            } catch (Exception e) {
                //
            }
        });
    }
}
